// Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  farm: (where?: FarmWhereInput) => Promise<boolean>;
  notification: (where?: NotificationWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  review: (where?: ReviewWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  farm: (where: FarmWhereUniqueInput) => FarmNullablePromise;
  farms: (args?: {
    where?: FarmWhereInput;
    orderBy?: FarmOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Farm>;
  farmsConnection: (args?: {
    where?: FarmWhereInput;
    orderBy?: FarmOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FarmConnectionPromise;
  notification: (
    where: NotificationWhereUniqueInput
  ) => NotificationNullablePromise;
  notifications: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Notification>;
  notificationsConnection: (args?: {
    where?: NotificationWhereInput;
    orderBy?: NotificationOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => NotificationConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductNullablePromise;
  products: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Product>;
  productsConnection: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductConnectionPromise;
  review: (where: ReviewWhereUniqueInput) => ReviewNullablePromise;
  reviews: (args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Review>;
  reviewsConnection: (args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ReviewConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createFarm: (data: FarmCreateInput) => FarmPromise;
  updateFarm: (args: {
    data: FarmUpdateInput;
    where: FarmWhereUniqueInput;
  }) => FarmPromise;
  updateManyFarms: (args: {
    data: FarmUpdateManyMutationInput;
    where?: FarmWhereInput;
  }) => BatchPayloadPromise;
  upsertFarm: (args: {
    where: FarmWhereUniqueInput;
    create: FarmCreateInput;
    update: FarmUpdateInput;
  }) => FarmPromise;
  deleteFarm: (where: FarmWhereUniqueInput) => FarmPromise;
  deleteManyFarms: (where?: FarmWhereInput) => BatchPayloadPromise;
  createNotification: (data: NotificationCreateInput) => NotificationPromise;
  updateNotification: (args: {
    data: NotificationUpdateInput;
    where: NotificationWhereUniqueInput;
  }) => NotificationPromise;
  updateManyNotifications: (args: {
    data: NotificationUpdateManyMutationInput;
    where?: NotificationWhereInput;
  }) => BatchPayloadPromise;
  upsertNotification: (args: {
    where: NotificationWhereUniqueInput;
    create: NotificationCreateInput;
    update: NotificationUpdateInput;
  }) => NotificationPromise;
  deleteNotification: (
    where: NotificationWhereUniqueInput
  ) => NotificationPromise;
  deleteManyNotifications: (
    where?: NotificationWhereInput
  ) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (args: {
    data: ProductUpdateInput;
    where: ProductWhereUniqueInput;
  }) => ProductPromise;
  updateManyProducts: (args: {
    data: ProductUpdateManyMutationInput;
    where?: ProductWhereInput;
  }) => BatchPayloadPromise;
  upsertProduct: (args: {
    where: ProductWhereUniqueInput;
    create: ProductCreateInput;
    update: ProductUpdateInput;
  }) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createReview: (data: ReviewCreateInput) => ReviewPromise;
  updateReview: (args: {
    data: ReviewUpdateInput;
    where: ReviewWhereUniqueInput;
  }) => ReviewPromise;
  updateManyReviews: (args: {
    data: ReviewUpdateManyMutationInput;
    where?: ReviewWhereInput;
  }) => BatchPayloadPromise;
  upsertReview: (args: {
    where: ReviewWhereUniqueInput;
    create: ReviewCreateInput;
    update: ReviewUpdateInput;
  }) => ReviewPromise;
  deleteReview: (where: ReviewWhereUniqueInput) => ReviewPromise;
  deleteManyReviews: (where?: ReviewWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  farm: (
    where?: FarmSubscriptionWhereInput
  ) => FarmSubscriptionPayloadSubscription;
  notification: (
    where?: NotificationSubscriptionWhereInput
  ) => NotificationSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  review: (
    where?: ReviewSubscriptionWhereInput
  ) => ReviewSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "marginDate_ASC"
  | "marginDate_DESC"
  | "price_ASC"
  | "price_DESC"
  | "numberPeople_ASC"
  | "numberPeople_DESC"
  | "detail_ASC"
  | "detail_DESC";

export type ReviewOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "point_ASC"
  | "point_DESC"
  | "content_ASC"
  | "content_DESC";

export type FarmOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "subtitle_ASC"
  | "subtitle_DESC"
  | "address_ASC"
  | "address_DESC"
  | "time_ASC"
  | "time_DESC"
  | "descriptoin_ASC"
  | "descriptoin_DESC"
  | "saleDetail_ASC"
  | "saleDetail_DESC"
  | "subInformation_ASC"
  | "subInformation_DESC"
  | "traffic_ASC"
  | "traffic_DESC"
  | "otherNote_ASC"
  | "otherNote_DESC"
  | "geoLongitude_ASC"
  | "geoLongitude_DESC"
  | "geoLatitude_ASC"
  | "geoLatitude_DESC"
  | "point_ASC"
  | "point_DESC";

export type NotificationOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "thumnail_ASC"
  | "thumnail_DESC"
  | "title_ASC"
  | "title_DESC"
  | "subtitle_ASC"
  | "subtitle_DESC"
  | "clicked_ASC"
  | "clicked_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "name_ASC"
  | "name_DESC"
  | "phone_ASC"
  | "phone_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface FarmUpdateimagesInput {
  set?: Maybe<String[] | String>;
}

export type FarmWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface NotificationCreateInput {
  id?: Maybe<ID_Input>;
  thumnail?: Maybe<String>;
  title: String;
  subtitle?: Maybe<String>;
  clicked?: Maybe<Int>;
}

export interface UserUpdateOneInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface FarmUpdateManyMutationInput {
  images?: Maybe<FarmUpdateimagesInput>;
  name?: Maybe<String>;
  subtitle?: Maybe<String>;
  address?: Maybe<String>;
  time?: Maybe<String>;
  descriptoin?: Maybe<String>;
  saleDetail?: Maybe<String>;
  subInformation?: Maybe<String>;
  traffic?: Maybe<String>;
  otherNote?: Maybe<String>;
  geoLongitude?: Maybe<Float>;
  geoLatitude?: Maybe<Float>;
  point?: Maybe<Float>;
}

export interface ProductUpdateManyInput {
  create?: Maybe<ProductCreateInput[] | ProductCreateInput>;
  update?: Maybe<
    | ProductUpdateWithWhereUniqueNestedInput[]
    | ProductUpdateWithWhereUniqueNestedInput
  >;
  upsert?: Maybe<
    | ProductUpsertWithWhereUniqueNestedInput[]
    | ProductUpsertWithWhereUniqueNestedInput
  >;
  delete?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  set?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  disconnect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
  deleteMany?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  updateMany?: Maybe<
    | ProductUpdateManyWithWhereNestedInput[]
    | ProductUpdateManyWithWhereNestedInput
  >;
}

export interface ReviewUpdateManyDataInput {
  point?: Maybe<Int>;
  content?: Maybe<String>;
}

export interface ReviewWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  point?: Maybe<Int>;
  point_not?: Maybe<Int>;
  point_in?: Maybe<Int[] | Int>;
  point_not_in?: Maybe<Int[] | Int>;
  point_lt?: Maybe<Int>;
  point_lte?: Maybe<Int>;
  point_gt?: Maybe<Int>;
  point_gte?: Maybe<Int>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  farm?: Maybe<FarmWhereInput>;
  author?: Maybe<UserWhereInput>;
  AND?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
  OR?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
  NOT?: Maybe<ReviewWhereInput[] | ReviewWhereInput>;
}

export interface ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput;
  data: ReviewUpdateManyDataInput;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ReviewSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ReviewWhereInput>;
  AND?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
  OR?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
  NOT?: Maybe<ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput>;
}

export interface NotificationSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<NotificationWhereInput>;
  AND?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
  OR?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
  NOT?: Maybe<
    NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  >;
}

export interface FarmCreateInput {
  id?: Maybe<ID_Input>;
  images?: Maybe<FarmCreateimagesInput>;
  name: String;
  subtitle?: Maybe<String>;
  address: String;
  time: String;
  descriptoin?: Maybe<String>;
  saleDetail?: Maybe<String>;
  subInformation?: Maybe<String>;
  traffic?: Maybe<String>;
  otherNote?: Maybe<String>;
  geoLongitude?: Maybe<Float>;
  geoLatitude?: Maybe<Float>;
  point?: Maybe<Float>;
  owner: UserCreateOneInput;
  product?: Maybe<ProductCreateManyInput>;
  review?: Maybe<ReviewCreateManyWithoutFarmInput>;
}

export interface UserUpdateManyMutationInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
}

export interface FarmCreateimagesInput {
  set?: Maybe<String[] | String>;
}

export interface ReviewUpdateManyMutationInput {
  point?: Maybe<Int>;
  content?: Maybe<String>;
}

export interface UserCreateOneInput {
  create?: Maybe<UserCreateInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface FarmUpsertWithoutReviewInput {
  update: FarmUpdateWithoutReviewDataInput;
  create: FarmCreateWithoutReviewInput;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  email: String;
  name: String;
  phone: String;
}

export interface FarmUpdateWithoutReviewDataInput {
  images?: Maybe<FarmUpdateimagesInput>;
  name?: Maybe<String>;
  subtitle?: Maybe<String>;
  address?: Maybe<String>;
  time?: Maybe<String>;
  descriptoin?: Maybe<String>;
  saleDetail?: Maybe<String>;
  subInformation?: Maybe<String>;
  traffic?: Maybe<String>;
  otherNote?: Maybe<String>;
  geoLongitude?: Maybe<Float>;
  geoLatitude?: Maybe<Float>;
  point?: Maybe<Float>;
  owner?: Maybe<UserUpdateOneRequiredInput>;
  product?: Maybe<ProductUpdateManyInput>;
}

export interface ProductCreateManyInput {
  create?: Maybe<ProductCreateInput[] | ProductCreateInput>;
  connect?: Maybe<ProductWhereUniqueInput[] | ProductWhereUniqueInput>;
}

export interface ReviewUpdateInput {
  point?: Maybe<Int>;
  content?: Maybe<String>;
  farm?: Maybe<FarmUpdateOneRequiredWithoutReviewInput>;
  author?: Maybe<UserUpdateOneInput>;
}

export interface ProductCreateInput {
  id?: Maybe<ID_Input>;
  startDate: DateTimeInput;
  marginDate?: Maybe<String>;
  price: Int;
  numberPeople?: Maybe<Int>;
  detail?: Maybe<String>;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ReviewCreateManyWithoutFarmInput {
  create?: Maybe<ReviewCreateWithoutFarmInput[] | ReviewCreateWithoutFarmInput>;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
}

export interface ReviewCreateInput {
  id?: Maybe<ID_Input>;
  point: Int;
  content: String;
  farm: FarmCreateOneWithoutReviewInput;
  author?: Maybe<UserCreateOneInput>;
}

export interface ReviewCreateWithoutFarmInput {
  id?: Maybe<ID_Input>;
  point: Int;
  content: String;
  author?: Maybe<UserCreateOneInput>;
}

export type ReviewWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface FarmUpdateInput {
  images?: Maybe<FarmUpdateimagesInput>;
  name?: Maybe<String>;
  subtitle?: Maybe<String>;
  address?: Maybe<String>;
  time?: Maybe<String>;
  descriptoin?: Maybe<String>;
  saleDetail?: Maybe<String>;
  subInformation?: Maybe<String>;
  traffic?: Maybe<String>;
  otherNote?: Maybe<String>;
  geoLongitude?: Maybe<Float>;
  geoLatitude?: Maybe<Float>;
  point?: Maybe<Float>;
  owner?: Maybe<UserUpdateOneRequiredInput>;
  product?: Maybe<ProductUpdateManyInput>;
  review?: Maybe<ReviewUpdateManyWithoutFarmInput>;
}

export interface NotificationUpdateManyMutationInput {
  thumnail?: Maybe<String>;
  title?: Maybe<String>;
  subtitle?: Maybe<String>;
  clicked?: Maybe<Int>;
}

export interface ReviewScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  point?: Maybe<Int>;
  point_not?: Maybe<Int>;
  point_in?: Maybe<Int[] | Int>;
  point_not_in?: Maybe<Int[] | Int>;
  point_lt?: Maybe<Int>;
  point_lte?: Maybe<Int>;
  point_gt?: Maybe<Int>;
  point_gte?: Maybe<Int>;
  content?: Maybe<String>;
  content_not?: Maybe<String>;
  content_in?: Maybe<String[] | String>;
  content_not_in?: Maybe<String[] | String>;
  content_lt?: Maybe<String>;
  content_lte?: Maybe<String>;
  content_gt?: Maybe<String>;
  content_gte?: Maybe<String>;
  content_contains?: Maybe<String>;
  content_not_contains?: Maybe<String>;
  content_starts_with?: Maybe<String>;
  content_not_starts_with?: Maybe<String>;
  content_ends_with?: Maybe<String>;
  content_not_ends_with?: Maybe<String>;
  AND?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  OR?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  NOT?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
  phone?: Maybe<String>;
}>;

export interface UserUpdateOneRequiredInput {
  create?: Maybe<UserCreateInput>;
  update?: Maybe<UserUpdateDataInput>;
  upsert?: Maybe<UserUpsertNestedInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface FarmWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  subtitle?: Maybe<String>;
  subtitle_not?: Maybe<String>;
  subtitle_in?: Maybe<String[] | String>;
  subtitle_not_in?: Maybe<String[] | String>;
  subtitle_lt?: Maybe<String>;
  subtitle_lte?: Maybe<String>;
  subtitle_gt?: Maybe<String>;
  subtitle_gte?: Maybe<String>;
  subtitle_contains?: Maybe<String>;
  subtitle_not_contains?: Maybe<String>;
  subtitle_starts_with?: Maybe<String>;
  subtitle_not_starts_with?: Maybe<String>;
  subtitle_ends_with?: Maybe<String>;
  subtitle_not_ends_with?: Maybe<String>;
  address?: Maybe<String>;
  address_not?: Maybe<String>;
  address_in?: Maybe<String[] | String>;
  address_not_in?: Maybe<String[] | String>;
  address_lt?: Maybe<String>;
  address_lte?: Maybe<String>;
  address_gt?: Maybe<String>;
  address_gte?: Maybe<String>;
  address_contains?: Maybe<String>;
  address_not_contains?: Maybe<String>;
  address_starts_with?: Maybe<String>;
  address_not_starts_with?: Maybe<String>;
  address_ends_with?: Maybe<String>;
  address_not_ends_with?: Maybe<String>;
  time?: Maybe<String>;
  time_not?: Maybe<String>;
  time_in?: Maybe<String[] | String>;
  time_not_in?: Maybe<String[] | String>;
  time_lt?: Maybe<String>;
  time_lte?: Maybe<String>;
  time_gt?: Maybe<String>;
  time_gte?: Maybe<String>;
  time_contains?: Maybe<String>;
  time_not_contains?: Maybe<String>;
  time_starts_with?: Maybe<String>;
  time_not_starts_with?: Maybe<String>;
  time_ends_with?: Maybe<String>;
  time_not_ends_with?: Maybe<String>;
  descriptoin?: Maybe<String>;
  descriptoin_not?: Maybe<String>;
  descriptoin_in?: Maybe<String[] | String>;
  descriptoin_not_in?: Maybe<String[] | String>;
  descriptoin_lt?: Maybe<String>;
  descriptoin_lte?: Maybe<String>;
  descriptoin_gt?: Maybe<String>;
  descriptoin_gte?: Maybe<String>;
  descriptoin_contains?: Maybe<String>;
  descriptoin_not_contains?: Maybe<String>;
  descriptoin_starts_with?: Maybe<String>;
  descriptoin_not_starts_with?: Maybe<String>;
  descriptoin_ends_with?: Maybe<String>;
  descriptoin_not_ends_with?: Maybe<String>;
  saleDetail?: Maybe<String>;
  saleDetail_not?: Maybe<String>;
  saleDetail_in?: Maybe<String[] | String>;
  saleDetail_not_in?: Maybe<String[] | String>;
  saleDetail_lt?: Maybe<String>;
  saleDetail_lte?: Maybe<String>;
  saleDetail_gt?: Maybe<String>;
  saleDetail_gte?: Maybe<String>;
  saleDetail_contains?: Maybe<String>;
  saleDetail_not_contains?: Maybe<String>;
  saleDetail_starts_with?: Maybe<String>;
  saleDetail_not_starts_with?: Maybe<String>;
  saleDetail_ends_with?: Maybe<String>;
  saleDetail_not_ends_with?: Maybe<String>;
  subInformation?: Maybe<String>;
  subInformation_not?: Maybe<String>;
  subInformation_in?: Maybe<String[] | String>;
  subInformation_not_in?: Maybe<String[] | String>;
  subInformation_lt?: Maybe<String>;
  subInformation_lte?: Maybe<String>;
  subInformation_gt?: Maybe<String>;
  subInformation_gte?: Maybe<String>;
  subInformation_contains?: Maybe<String>;
  subInformation_not_contains?: Maybe<String>;
  subInformation_starts_with?: Maybe<String>;
  subInformation_not_starts_with?: Maybe<String>;
  subInformation_ends_with?: Maybe<String>;
  subInformation_not_ends_with?: Maybe<String>;
  traffic?: Maybe<String>;
  traffic_not?: Maybe<String>;
  traffic_in?: Maybe<String[] | String>;
  traffic_not_in?: Maybe<String[] | String>;
  traffic_lt?: Maybe<String>;
  traffic_lte?: Maybe<String>;
  traffic_gt?: Maybe<String>;
  traffic_gte?: Maybe<String>;
  traffic_contains?: Maybe<String>;
  traffic_not_contains?: Maybe<String>;
  traffic_starts_with?: Maybe<String>;
  traffic_not_starts_with?: Maybe<String>;
  traffic_ends_with?: Maybe<String>;
  traffic_not_ends_with?: Maybe<String>;
  otherNote?: Maybe<String>;
  otherNote_not?: Maybe<String>;
  otherNote_in?: Maybe<String[] | String>;
  otherNote_not_in?: Maybe<String[] | String>;
  otherNote_lt?: Maybe<String>;
  otherNote_lte?: Maybe<String>;
  otherNote_gt?: Maybe<String>;
  otherNote_gte?: Maybe<String>;
  otherNote_contains?: Maybe<String>;
  otherNote_not_contains?: Maybe<String>;
  otherNote_starts_with?: Maybe<String>;
  otherNote_not_starts_with?: Maybe<String>;
  otherNote_ends_with?: Maybe<String>;
  otherNote_not_ends_with?: Maybe<String>;
  geoLongitude?: Maybe<Float>;
  geoLongitude_not?: Maybe<Float>;
  geoLongitude_in?: Maybe<Float[] | Float>;
  geoLongitude_not_in?: Maybe<Float[] | Float>;
  geoLongitude_lt?: Maybe<Float>;
  geoLongitude_lte?: Maybe<Float>;
  geoLongitude_gt?: Maybe<Float>;
  geoLongitude_gte?: Maybe<Float>;
  geoLatitude?: Maybe<Float>;
  geoLatitude_not?: Maybe<Float>;
  geoLatitude_in?: Maybe<Float[] | Float>;
  geoLatitude_not_in?: Maybe<Float[] | Float>;
  geoLatitude_lt?: Maybe<Float>;
  geoLatitude_lte?: Maybe<Float>;
  geoLatitude_gt?: Maybe<Float>;
  geoLatitude_gte?: Maybe<Float>;
  point?: Maybe<Float>;
  point_not?: Maybe<Float>;
  point_in?: Maybe<Float[] | Float>;
  point_not_in?: Maybe<Float[] | Float>;
  point_lt?: Maybe<Float>;
  point_lte?: Maybe<Float>;
  point_gt?: Maybe<Float>;
  point_gte?: Maybe<Float>;
  owner?: Maybe<UserWhereInput>;
  product_every?: Maybe<ProductWhereInput>;
  product_some?: Maybe<ProductWhereInput>;
  product_none?: Maybe<ProductWhereInput>;
  review_every?: Maybe<ReviewWhereInput>;
  review_some?: Maybe<ReviewWhereInput>;
  review_none?: Maybe<ReviewWhereInput>;
  AND?: Maybe<FarmWhereInput[] | FarmWhereInput>;
  OR?: Maybe<FarmWhereInput[] | FarmWhereInput>;
  NOT?: Maybe<FarmWhereInput[] | FarmWhereInput>;
}

export interface UserUpdateDataInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  OR?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  NOT?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
}

export interface UserUpsertNestedInput {
  update: UserUpdateDataInput;
  create: UserCreateInput;
}

export interface UserUpdateInput {
  email?: Maybe<String>;
  name?: Maybe<String>;
  phone?: Maybe<String>;
}

export interface ReviewUpsertWithWhereUniqueWithoutFarmInput {
  where: ReviewWhereUniqueInput;
  update: ReviewUpdateWithoutFarmDataInput;
  create: ReviewCreateWithoutFarmInput;
}

export interface NotificationWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  thumnail?: Maybe<String>;
  thumnail_not?: Maybe<String>;
  thumnail_in?: Maybe<String[] | String>;
  thumnail_not_in?: Maybe<String[] | String>;
  thumnail_lt?: Maybe<String>;
  thumnail_lte?: Maybe<String>;
  thumnail_gt?: Maybe<String>;
  thumnail_gte?: Maybe<String>;
  thumnail_contains?: Maybe<String>;
  thumnail_not_contains?: Maybe<String>;
  thumnail_starts_with?: Maybe<String>;
  thumnail_not_starts_with?: Maybe<String>;
  thumnail_ends_with?: Maybe<String>;
  thumnail_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  subtitle?: Maybe<String>;
  subtitle_not?: Maybe<String>;
  subtitle_in?: Maybe<String[] | String>;
  subtitle_not_in?: Maybe<String[] | String>;
  subtitle_lt?: Maybe<String>;
  subtitle_lte?: Maybe<String>;
  subtitle_gt?: Maybe<String>;
  subtitle_gte?: Maybe<String>;
  subtitle_contains?: Maybe<String>;
  subtitle_not_contains?: Maybe<String>;
  subtitle_starts_with?: Maybe<String>;
  subtitle_not_starts_with?: Maybe<String>;
  subtitle_ends_with?: Maybe<String>;
  subtitle_not_ends_with?: Maybe<String>;
  clicked?: Maybe<Int>;
  clicked_not?: Maybe<Int>;
  clicked_in?: Maybe<Int[] | Int>;
  clicked_not_in?: Maybe<Int[] | Int>;
  clicked_lt?: Maybe<Int>;
  clicked_lte?: Maybe<Int>;
  clicked_gt?: Maybe<Int>;
  clicked_gte?: Maybe<Int>;
  AND?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
  OR?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
  NOT?: Maybe<NotificationWhereInput[] | NotificationWhereInput>;
}

export interface ProductUpdateWithWhereUniqueNestedInput {
  where: ProductWhereUniqueInput;
  data: ProductUpdateDataInput;
}

export interface FarmCreateWithoutReviewInput {
  id?: Maybe<ID_Input>;
  images?: Maybe<FarmCreateimagesInput>;
  name: String;
  subtitle?: Maybe<String>;
  address: String;
  time: String;
  descriptoin?: Maybe<String>;
  saleDetail?: Maybe<String>;
  subInformation?: Maybe<String>;
  traffic?: Maybe<String>;
  otherNote?: Maybe<String>;
  geoLongitude?: Maybe<Float>;
  geoLatitude?: Maybe<Float>;
  point?: Maybe<Float>;
  owner: UserCreateOneInput;
  product?: Maybe<ProductCreateManyInput>;
}

export interface ProductUpdateDataInput {
  startDate?: Maybe<DateTimeInput>;
  marginDate?: Maybe<String>;
  price?: Maybe<Int>;
  numberPeople?: Maybe<Int>;
  detail?: Maybe<String>;
}

export interface ProductUpdateManyMutationInput {
  startDate?: Maybe<DateTimeInput>;
  marginDate?: Maybe<String>;
  price?: Maybe<Int>;
  numberPeople?: Maybe<Int>;
  detail?: Maybe<String>;
}

export interface ProductUpsertWithWhereUniqueNestedInput {
  where: ProductWhereUniqueInput;
  update: ProductUpdateDataInput;
  create: ProductCreateInput;
}

export interface NotificationUpdateInput {
  thumnail?: Maybe<String>;
  title?: Maybe<String>;
  subtitle?: Maybe<String>;
  clicked?: Maybe<Int>;
}

export interface ProductScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  marginDate?: Maybe<String>;
  marginDate_not?: Maybe<String>;
  marginDate_in?: Maybe<String[] | String>;
  marginDate_not_in?: Maybe<String[] | String>;
  marginDate_lt?: Maybe<String>;
  marginDate_lte?: Maybe<String>;
  marginDate_gt?: Maybe<String>;
  marginDate_gte?: Maybe<String>;
  marginDate_contains?: Maybe<String>;
  marginDate_not_contains?: Maybe<String>;
  marginDate_starts_with?: Maybe<String>;
  marginDate_not_starts_with?: Maybe<String>;
  marginDate_ends_with?: Maybe<String>;
  marginDate_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  numberPeople?: Maybe<Int>;
  numberPeople_not?: Maybe<Int>;
  numberPeople_in?: Maybe<Int[] | Int>;
  numberPeople_not_in?: Maybe<Int[] | Int>;
  numberPeople_lt?: Maybe<Int>;
  numberPeople_lte?: Maybe<Int>;
  numberPeople_gt?: Maybe<Int>;
  numberPeople_gte?: Maybe<Int>;
  detail?: Maybe<String>;
  detail_not?: Maybe<String>;
  detail_in?: Maybe<String[] | String>;
  detail_not_in?: Maybe<String[] | String>;
  detail_lt?: Maybe<String>;
  detail_lte?: Maybe<String>;
  detail_gt?: Maybe<String>;
  detail_gte?: Maybe<String>;
  detail_contains?: Maybe<String>;
  detail_not_contains?: Maybe<String>;
  detail_starts_with?: Maybe<String>;
  detail_not_starts_with?: Maybe<String>;
  detail_ends_with?: Maybe<String>;
  detail_not_ends_with?: Maybe<String>;
  AND?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  OR?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
  NOT?: Maybe<ProductScalarWhereInput[] | ProductScalarWhereInput>;
}

export interface ProductWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  startDate?: Maybe<DateTimeInput>;
  startDate_not?: Maybe<DateTimeInput>;
  startDate_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  startDate_lt?: Maybe<DateTimeInput>;
  startDate_lte?: Maybe<DateTimeInput>;
  startDate_gt?: Maybe<DateTimeInput>;
  startDate_gte?: Maybe<DateTimeInput>;
  marginDate?: Maybe<String>;
  marginDate_not?: Maybe<String>;
  marginDate_in?: Maybe<String[] | String>;
  marginDate_not_in?: Maybe<String[] | String>;
  marginDate_lt?: Maybe<String>;
  marginDate_lte?: Maybe<String>;
  marginDate_gt?: Maybe<String>;
  marginDate_gte?: Maybe<String>;
  marginDate_contains?: Maybe<String>;
  marginDate_not_contains?: Maybe<String>;
  marginDate_starts_with?: Maybe<String>;
  marginDate_not_starts_with?: Maybe<String>;
  marginDate_ends_with?: Maybe<String>;
  marginDate_not_ends_with?: Maybe<String>;
  price?: Maybe<Int>;
  price_not?: Maybe<Int>;
  price_in?: Maybe<Int[] | Int>;
  price_not_in?: Maybe<Int[] | Int>;
  price_lt?: Maybe<Int>;
  price_lte?: Maybe<Int>;
  price_gt?: Maybe<Int>;
  price_gte?: Maybe<Int>;
  numberPeople?: Maybe<Int>;
  numberPeople_not?: Maybe<Int>;
  numberPeople_in?: Maybe<Int[] | Int>;
  numberPeople_not_in?: Maybe<Int[] | Int>;
  numberPeople_lt?: Maybe<Int>;
  numberPeople_lte?: Maybe<Int>;
  numberPeople_gt?: Maybe<Int>;
  numberPeople_gte?: Maybe<Int>;
  detail?: Maybe<String>;
  detail_not?: Maybe<String>;
  detail_in?: Maybe<String[] | String>;
  detail_not_in?: Maybe<String[] | String>;
  detail_lt?: Maybe<String>;
  detail_lte?: Maybe<String>;
  detail_gt?: Maybe<String>;
  detail_gte?: Maybe<String>;
  detail_contains?: Maybe<String>;
  detail_not_contains?: Maybe<String>;
  detail_starts_with?: Maybe<String>;
  detail_not_starts_with?: Maybe<String>;
  detail_ends_with?: Maybe<String>;
  detail_not_ends_with?: Maybe<String>;
  AND?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  OR?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  NOT?: Maybe<ProductWhereInput[] | ProductWhereInput>;
}

export interface ProductUpdateManyWithWhereNestedInput {
  where: ProductScalarWhereInput;
  data: ProductUpdateManyDataInput;
}

export type NotificationWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ReviewUpdateWithoutFarmDataInput {
  point?: Maybe<Int>;
  content?: Maybe<String>;
  author?: Maybe<UserUpdateOneInput>;
}

export interface ReviewUpdateWithWhereUniqueWithoutFarmInput {
  where: ReviewWhereUniqueInput;
  data: ReviewUpdateWithoutFarmDataInput;
}

export interface ReviewUpdateManyWithoutFarmInput {
  create?: Maybe<ReviewCreateWithoutFarmInput[] | ReviewCreateWithoutFarmInput>;
  delete?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  connect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  set?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  disconnect?: Maybe<ReviewWhereUniqueInput[] | ReviewWhereUniqueInput>;
  update?: Maybe<
    | ReviewUpdateWithWhereUniqueWithoutFarmInput[]
    | ReviewUpdateWithWhereUniqueWithoutFarmInput
  >;
  upsert?: Maybe<
    | ReviewUpsertWithWhereUniqueWithoutFarmInput[]
    | ReviewUpsertWithWhereUniqueWithoutFarmInput
  >;
  deleteMany?: Maybe<ReviewScalarWhereInput[] | ReviewScalarWhereInput>;
  updateMany?: Maybe<
    | ReviewUpdateManyWithWhereNestedInput[]
    | ReviewUpdateManyWithWhereNestedInput
  >;
}

export interface ProductUpdateManyDataInput {
  startDate?: Maybe<DateTimeInput>;
  marginDate?: Maybe<String>;
  price?: Maybe<Int>;
  numberPeople?: Maybe<Int>;
  detail?: Maybe<String>;
}

export interface FarmUpdateOneRequiredWithoutReviewInput {
  create?: Maybe<FarmCreateWithoutReviewInput>;
  update?: Maybe<FarmUpdateWithoutReviewDataInput>;
  upsert?: Maybe<FarmUpsertWithoutReviewInput>;
  connect?: Maybe<FarmWhereUniqueInput>;
}

export interface FarmSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<FarmWhereInput>;
  AND?: Maybe<FarmSubscriptionWhereInput[] | FarmSubscriptionWhereInput>;
  OR?: Maybe<FarmSubscriptionWhereInput[] | FarmSubscriptionWhereInput>;
  NOT?: Maybe<FarmSubscriptionWhereInput[] | FarmSubscriptionWhereInput>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface ProductUpdateInput {
  startDate?: Maybe<DateTimeInput>;
  marginDate?: Maybe<String>;
  price?: Maybe<Int>;
  numberPeople?: Maybe<Int>;
  detail?: Maybe<String>;
}

export interface FarmCreateOneWithoutReviewInput {
  create?: Maybe<FarmCreateWithoutReviewInput>;
  connect?: Maybe<FarmWhereUniqueInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  name: String;
  phone: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
}

export interface NotificationConnection {
  pageInfo: PageInfo;
  edges: NotificationEdge[];
}

export interface NotificationConnectionPromise
  extends Promise<NotificationConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<NotificationEdge>>() => T;
  aggregate: <T = AggregateNotificationPromise>() => T;
}

export interface NotificationConnectionSubscription
  extends Promise<AsyncIterator<NotificationConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<NotificationEdgeSubscription>>>() => T;
  aggregate: <T = AggregateNotificationSubscription>() => T;
}

export interface ProductPreviousValues {
  id: ID_Output;
  startDate: DateTimeOutput;
  marginDate?: String;
  price: Int;
  numberPeople?: Int;
  detail?: String;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  startDate: () => Promise<DateTimeOutput>;
  marginDate: () => Promise<String>;
  price: () => Promise<Int>;
  numberPeople: () => Promise<Int>;
  detail: () => Promise<String>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  marginDate: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  numberPeople: () => Promise<AsyncIterator<Int>>;
  detail: () => Promise<AsyncIterator<String>>;
}

export interface ReviewPreviousValues {
  id: ID_Output;
  point: Int;
  content: String;
}

export interface ReviewPreviousValuesPromise
  extends Promise<ReviewPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  point: () => Promise<Int>;
  content: () => Promise<String>;
}

export interface ReviewPreviousValuesSubscription
  extends Promise<AsyncIterator<ReviewPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  point: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
}

export interface AggregateFarm {
  count: Int;
}

export interface AggregateFarmPromise
  extends Promise<AggregateFarm>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateFarmSubscription
  extends Promise<AsyncIterator<AggregateFarm>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Notification {
  id: ID_Output;
  thumnail?: String;
  title: String;
  subtitle?: String;
  clicked: Int;
}

export interface NotificationPromise
  extends Promise<Notification>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  thumnail: () => Promise<String>;
  title: () => Promise<String>;
  subtitle: () => Promise<String>;
  clicked: () => Promise<Int>;
}

export interface NotificationSubscription
  extends Promise<AsyncIterator<Notification>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  thumnail: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  subtitle: () => Promise<AsyncIterator<String>>;
  clicked: () => Promise<AsyncIterator<Int>>;
}

export interface NotificationNullablePromise
  extends Promise<Notification | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  thumnail: () => Promise<String>;
  title: () => Promise<String>;
  subtitle: () => Promise<String>;
  clicked: () => Promise<Int>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ReviewSubscriptionPayload {
  mutation: MutationType;
  node: Review;
  updatedFields: String[];
  previousValues: ReviewPreviousValues;
}

export interface ReviewSubscriptionPayloadPromise
  extends Promise<ReviewSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ReviewPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ReviewPreviousValuesPromise>() => T;
}

export interface ReviewSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ReviewSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ReviewSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ReviewPreviousValuesSubscription>() => T;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface FarmEdge {
  node: Farm;
  cursor: String;
}

export interface FarmEdgePromise extends Promise<FarmEdge>, Fragmentable {
  node: <T = FarmPromise>() => T;
  cursor: () => Promise<String>;
}

export interface FarmEdgeSubscription
  extends Promise<AsyncIterator<FarmEdge>>,
    Fragmentable {
  node: <T = FarmSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface Product {
  id: ID_Output;
  startDate: DateTimeOutput;
  marginDate?: String;
  price: Int;
  numberPeople?: Int;
  detail?: String;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  startDate: () => Promise<DateTimeOutput>;
  marginDate: () => Promise<String>;
  price: () => Promise<Int>;
  numberPeople: () => Promise<Int>;
  detail: () => Promise<String>;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  startDate: () => Promise<AsyncIterator<DateTimeOutput>>;
  marginDate: () => Promise<AsyncIterator<String>>;
  price: () => Promise<AsyncIterator<Int>>;
  numberPeople: () => Promise<AsyncIterator<Int>>;
  detail: () => Promise<AsyncIterator<String>>;
}

export interface ProductNullablePromise
  extends Promise<Product | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  startDate: () => Promise<DateTimeOutput>;
  marginDate: () => Promise<String>;
  price: () => Promise<Int>;
  numberPeople: () => Promise<Int>;
  detail: () => Promise<String>;
}

export interface Review {
  id: ID_Output;
  point: Int;
  content: String;
}

export interface ReviewPromise extends Promise<Review>, Fragmentable {
  id: () => Promise<ID_Output>;
  point: () => Promise<Int>;
  content: () => Promise<String>;
  farm: <T = FarmPromise>() => T;
  author: <T = UserPromise>() => T;
}

export interface ReviewSubscription
  extends Promise<AsyncIterator<Review>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  point: () => Promise<AsyncIterator<Int>>;
  content: () => Promise<AsyncIterator<String>>;
  farm: <T = FarmSubscription>() => T;
  author: <T = UserSubscription>() => T;
}

export interface ReviewNullablePromise
  extends Promise<Review | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  point: () => Promise<Int>;
  content: () => Promise<String>;
  farm: <T = FarmPromise>() => T;
  author: <T = UserPromise>() => T;
}

export interface ReviewEdge {
  node: Review;
  cursor: String;
}

export interface ReviewEdgePromise extends Promise<ReviewEdge>, Fragmentable {
  node: <T = ReviewPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ReviewEdgeSubscription
  extends Promise<AsyncIterator<ReviewEdge>>,
    Fragmentable {
  node: <T = ReviewSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Farm {
  id: ID_Output;
  images: String[];
  name: String;
  subtitle?: String;
  address: String;
  time: String;
  descriptoin?: String;
  saleDetail?: String;
  subInformation?: String;
  traffic?: String;
  otherNote?: String;
  geoLongitude?: Float;
  geoLatitude?: Float;
  point?: Float;
}

export interface FarmPromise extends Promise<Farm>, Fragmentable {
  id: () => Promise<ID_Output>;
  images: () => Promise<String[]>;
  name: () => Promise<String>;
  subtitle: () => Promise<String>;
  address: () => Promise<String>;
  time: () => Promise<String>;
  descriptoin: () => Promise<String>;
  saleDetail: () => Promise<String>;
  subInformation: () => Promise<String>;
  traffic: () => Promise<String>;
  otherNote: () => Promise<String>;
  geoLongitude: () => Promise<Float>;
  geoLatitude: () => Promise<Float>;
  point: () => Promise<Float>;
  owner: <T = UserPromise>() => T;
  product: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  review: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FarmSubscription
  extends Promise<AsyncIterator<Farm>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  images: () => Promise<AsyncIterator<String[]>>;
  name: () => Promise<AsyncIterator<String>>;
  subtitle: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  time: () => Promise<AsyncIterator<String>>;
  descriptoin: () => Promise<AsyncIterator<String>>;
  saleDetail: () => Promise<AsyncIterator<String>>;
  subInformation: () => Promise<AsyncIterator<String>>;
  traffic: () => Promise<AsyncIterator<String>>;
  otherNote: () => Promise<AsyncIterator<String>>;
  geoLongitude: () => Promise<AsyncIterator<Float>>;
  geoLatitude: () => Promise<AsyncIterator<Float>>;
  point: () => Promise<AsyncIterator<Float>>;
  owner: <T = UserSubscription>() => T;
  product: <T = Promise<AsyncIterator<ProductSubscription>>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  review: <T = Promise<AsyncIterator<ReviewSubscription>>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface FarmNullablePromise
  extends Promise<Farm | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  images: () => Promise<String[]>;
  name: () => Promise<String>;
  subtitle: () => Promise<String>;
  address: () => Promise<String>;
  time: () => Promise<String>;
  descriptoin: () => Promise<String>;
  saleDetail: () => Promise<String>;
  subInformation: () => Promise<String>;
  traffic: () => Promise<String>;
  otherNote: () => Promise<String>;
  geoLongitude: () => Promise<Float>;
  geoLatitude: () => Promise<Float>;
  point: () => Promise<Float>;
  owner: <T = UserPromise>() => T;
  product: <T = FragmentableArray<Product>>(args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  review: <T = FragmentableArray<Review>>(args?: {
    where?: ReviewWhereInput;
    orderBy?: ReviewOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface FarmSubscriptionPayload {
  mutation: MutationType;
  node: Farm;
  updatedFields: String[];
  previousValues: FarmPreviousValues;
}

export interface FarmSubscriptionPayloadPromise
  extends Promise<FarmSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = FarmPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = FarmPreviousValuesPromise>() => T;
}

export interface FarmSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<FarmSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = FarmSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = FarmPreviousValuesSubscription>() => T;
}

export interface NotificationEdge {
  node: Notification;
  cursor: String;
}

export interface NotificationEdgePromise
  extends Promise<NotificationEdge>,
    Fragmentable {
  node: <T = NotificationPromise>() => T;
  cursor: () => Promise<String>;
}

export interface NotificationEdgeSubscription
  extends Promise<AsyncIterator<NotificationEdge>>,
    Fragmentable {
  node: <T = NotificationSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface FarmPreviousValues {
  id: ID_Output;
  images: String[];
  name: String;
  subtitle?: String;
  address: String;
  time: String;
  descriptoin?: String;
  saleDetail?: String;
  subInformation?: String;
  traffic?: String;
  otherNote?: String;
  geoLongitude?: Float;
  geoLatitude?: Float;
  point?: Float;
}

export interface FarmPreviousValuesPromise
  extends Promise<FarmPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  images: () => Promise<String[]>;
  name: () => Promise<String>;
  subtitle: () => Promise<String>;
  address: () => Promise<String>;
  time: () => Promise<String>;
  descriptoin: () => Promise<String>;
  saleDetail: () => Promise<String>;
  subInformation: () => Promise<String>;
  traffic: () => Promise<String>;
  otherNote: () => Promise<String>;
  geoLongitude: () => Promise<Float>;
  geoLatitude: () => Promise<Float>;
  point: () => Promise<Float>;
}

export interface FarmPreviousValuesSubscription
  extends Promise<AsyncIterator<FarmPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  images: () => Promise<AsyncIterator<String[]>>;
  name: () => Promise<AsyncIterator<String>>;
  subtitle: () => Promise<AsyncIterator<String>>;
  address: () => Promise<AsyncIterator<String>>;
  time: () => Promise<AsyncIterator<String>>;
  descriptoin: () => Promise<AsyncIterator<String>>;
  saleDetail: () => Promise<AsyncIterator<String>>;
  subInformation: () => Promise<AsyncIterator<String>>;
  traffic: () => Promise<AsyncIterator<String>>;
  otherNote: () => Promise<AsyncIterator<String>>;
  geoLongitude: () => Promise<AsyncIterator<Float>>;
  geoLatitude: () => Promise<AsyncIterator<Float>>;
  point: () => Promise<AsyncIterator<Float>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface FarmConnection {
  pageInfo: PageInfo;
  edges: FarmEdge[];
}

export interface FarmConnectionPromise
  extends Promise<FarmConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<FarmEdge>>() => T;
  aggregate: <T = AggregateFarmPromise>() => T;
}

export interface FarmConnectionSubscription
  extends Promise<AsyncIterator<FarmConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<FarmEdgeSubscription>>>() => T;
  aggregate: <T = AggregateFarmSubscription>() => T;
}

export interface AggregateReview {
  count: Int;
}

export interface AggregateReviewPromise
  extends Promise<AggregateReview>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateReviewSubscription
  extends Promise<AsyncIterator<AggregateReview>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  name: String;
  phone: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  name: () => Promise<String>;
  phone: () => Promise<String>;
}

export interface NotificationPreviousValues {
  id: ID_Output;
  thumnail?: String;
  title: String;
  subtitle?: String;
  clicked: Int;
}

export interface NotificationPreviousValuesPromise
  extends Promise<NotificationPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  thumnail: () => Promise<String>;
  title: () => Promise<String>;
  subtitle: () => Promise<String>;
  clicked: () => Promise<Int>;
}

export interface NotificationPreviousValuesSubscription
  extends Promise<AsyncIterator<NotificationPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  thumnail: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  subtitle: () => Promise<AsyncIterator<String>>;
  clicked: () => Promise<AsyncIterator<Int>>;
}

export interface NotificationSubscriptionPayload {
  mutation: MutationType;
  node: Notification;
  updatedFields: String[];
  previousValues: NotificationPreviousValues;
}

export interface NotificationSubscriptionPayloadPromise
  extends Promise<NotificationSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = NotificationPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = NotificationPreviousValuesPromise>() => T;
}

export interface NotificationSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<NotificationSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = NotificationSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = NotificationPreviousValuesSubscription>() => T;
}

export interface AggregateNotification {
  count: Int;
}

export interface AggregateNotificationPromise
  extends Promise<AggregateNotification>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateNotificationSubscription
  extends Promise<AsyncIterator<AggregateNotification>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ReviewConnection {
  pageInfo: PageInfo;
  edges: ReviewEdge[];
}

export interface ReviewConnectionPromise
  extends Promise<ReviewConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ReviewEdge>>() => T;
  aggregate: <T = AggregateReviewPromise>() => T;
}

export interface ReviewConnectionSubscription
  extends Promise<AsyncIterator<ReviewConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ReviewEdgeSubscription>>>() => T;
  aggregate: <T = AggregateReviewSubscription>() => T;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point).
*/
export type Float = number;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Notification",
    embedded: false
  },
  {
    name: "Farm",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "Review",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
