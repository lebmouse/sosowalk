module.exports = {
        typeDefs: // Code generated by Prisma (prisma@1.34.8). DO NOT EDIT.
  // Please don't change this file manually but run `prisma generate` to update it.
  // For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

/* GraphQL */ `type AggregateBooking {
  count: Int!
}

type AggregateCourse {
  count: Int!
}

type AggregateFunding {
  count: Int!
}

type AggregateImage {
  count: Int!
}

type AggregateReview {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  count: Long!
}

type Booking {
  id: ID!
  user(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  course(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course!]
}

type BookingConnection {
  pageInfo: PageInfo!
  edges: [BookingEdge]!
  aggregate: AggregateBooking!
}

input BookingCreateInput {
  id: ID
  user: UserCreateManyInput
  course: CourseCreateManyInput
}

type BookingEdge {
  node: Booking!
  cursor: String!
}

enum BookingOrderByInput {
  id_ASC
  id_DESC
}

type BookingPreviousValues {
  id: ID!
}

type BookingSubscriptionPayload {
  mutation: MutationType!
  node: Booking
  updatedFields: [String!]
  previousValues: BookingPreviousValues
}

input BookingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BookingWhereInput
  AND: [BookingSubscriptionWhereInput!]
  OR: [BookingSubscriptionWhereInput!]
  NOT: [BookingSubscriptionWhereInput!]
}

input BookingUpdateInput {
  user: UserUpdateManyInput
  course: CourseUpdateManyInput
}

input BookingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  user_every: UserWhereInput
  user_some: UserWhereInput
  user_none: UserWhereInput
  course_every: CourseWhereInput
  course_some: CourseWhereInput
  course_none: CourseWhereInput
  AND: [BookingWhereInput!]
  OR: [BookingWhereInput!]
  NOT: [BookingWhereInput!]
}

input BookingWhereUniqueInput {
  id: ID
}

type Course {
  id: ID!
  title: String!
  subtitle: String!
  images: String
  number: Int!
  prevStation: String!
  departureStation: String!
  nextStation: String!
  courseRoute: [String!]!
  departureTime: DateTime!
  departureArea: String!
}

type CourseConnection {
  pageInfo: PageInfo!
  edges: [CourseEdge]!
  aggregate: AggregateCourse!
}

input CourseCreatecourseRouteInput {
  set: [String!]
}

input CourseCreateInput {
  id: ID
  title: String!
  subtitle: String!
  images: String
  number: Int!
  prevStation: String!
  departureStation: String!
  nextStation: String!
  courseRoute: CourseCreatecourseRouteInput
  departureTime: DateTime!
  departureArea: String!
}

input CourseCreateManyInput {
  create: [CourseCreateInput!]
  connect: [CourseWhereUniqueInput!]
}

type CourseEdge {
  node: Course!
  cursor: String!
}

enum CourseOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  subtitle_ASC
  subtitle_DESC
  images_ASC
  images_DESC
  number_ASC
  number_DESC
  prevStation_ASC
  prevStation_DESC
  departureStation_ASC
  departureStation_DESC
  nextStation_ASC
  nextStation_DESC
  departureTime_ASC
  departureTime_DESC
  departureArea_ASC
  departureArea_DESC
}

type CoursePreviousValues {
  id: ID!
  title: String!
  subtitle: String!
  images: String
  number: Int!
  prevStation: String!
  departureStation: String!
  nextStation: String!
  courseRoute: [String!]!
  departureTime: DateTime!
  departureArea: String!
}

input CourseScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  subtitle: String
  subtitle_not: String
  subtitle_in: [String!]
  subtitle_not_in: [String!]
  subtitle_lt: String
  subtitle_lte: String
  subtitle_gt: String
  subtitle_gte: String
  subtitle_contains: String
  subtitle_not_contains: String
  subtitle_starts_with: String
  subtitle_not_starts_with: String
  subtitle_ends_with: String
  subtitle_not_ends_with: String
  images: String
  images_not: String
  images_in: [String!]
  images_not_in: [String!]
  images_lt: String
  images_lte: String
  images_gt: String
  images_gte: String
  images_contains: String
  images_not_contains: String
  images_starts_with: String
  images_not_starts_with: String
  images_ends_with: String
  images_not_ends_with: String
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  prevStation: String
  prevStation_not: String
  prevStation_in: [String!]
  prevStation_not_in: [String!]
  prevStation_lt: String
  prevStation_lte: String
  prevStation_gt: String
  prevStation_gte: String
  prevStation_contains: String
  prevStation_not_contains: String
  prevStation_starts_with: String
  prevStation_not_starts_with: String
  prevStation_ends_with: String
  prevStation_not_ends_with: String
  departureStation: String
  departureStation_not: String
  departureStation_in: [String!]
  departureStation_not_in: [String!]
  departureStation_lt: String
  departureStation_lte: String
  departureStation_gt: String
  departureStation_gte: String
  departureStation_contains: String
  departureStation_not_contains: String
  departureStation_starts_with: String
  departureStation_not_starts_with: String
  departureStation_ends_with: String
  departureStation_not_ends_with: String
  nextStation: String
  nextStation_not: String
  nextStation_in: [String!]
  nextStation_not_in: [String!]
  nextStation_lt: String
  nextStation_lte: String
  nextStation_gt: String
  nextStation_gte: String
  nextStation_contains: String
  nextStation_not_contains: String
  nextStation_starts_with: String
  nextStation_not_starts_with: String
  nextStation_ends_with: String
  nextStation_not_ends_with: String
  departureTime: DateTime
  departureTime_not: DateTime
  departureTime_in: [DateTime!]
  departureTime_not_in: [DateTime!]
  departureTime_lt: DateTime
  departureTime_lte: DateTime
  departureTime_gt: DateTime
  departureTime_gte: DateTime
  departureArea: String
  departureArea_not: String
  departureArea_in: [String!]
  departureArea_not_in: [String!]
  departureArea_lt: String
  departureArea_lte: String
  departureArea_gt: String
  departureArea_gte: String
  departureArea_contains: String
  departureArea_not_contains: String
  departureArea_starts_with: String
  departureArea_not_starts_with: String
  departureArea_ends_with: String
  departureArea_not_ends_with: String
  AND: [CourseScalarWhereInput!]
  OR: [CourseScalarWhereInput!]
  NOT: [CourseScalarWhereInput!]
}

type CourseSubscriptionPayload {
  mutation: MutationType!
  node: Course
  updatedFields: [String!]
  previousValues: CoursePreviousValues
}

input CourseSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CourseWhereInput
  AND: [CourseSubscriptionWhereInput!]
  OR: [CourseSubscriptionWhereInput!]
  NOT: [CourseSubscriptionWhereInput!]
}

input CourseUpdatecourseRouteInput {
  set: [String!]
}

input CourseUpdateDataInput {
  title: String
  subtitle: String
  images: String
  number: Int
  prevStation: String
  departureStation: String
  nextStation: String
  courseRoute: CourseUpdatecourseRouteInput
  departureTime: DateTime
  departureArea: String
}

input CourseUpdateInput {
  title: String
  subtitle: String
  images: String
  number: Int
  prevStation: String
  departureStation: String
  nextStation: String
  courseRoute: CourseUpdatecourseRouteInput
  departureTime: DateTime
  departureArea: String
}

input CourseUpdateManyDataInput {
  title: String
  subtitle: String
  images: String
  number: Int
  prevStation: String
  departureStation: String
  nextStation: String
  courseRoute: CourseUpdatecourseRouteInput
  departureTime: DateTime
  departureArea: String
}

input CourseUpdateManyInput {
  create: [CourseCreateInput!]
  update: [CourseUpdateWithWhereUniqueNestedInput!]
  upsert: [CourseUpsertWithWhereUniqueNestedInput!]
  delete: [CourseWhereUniqueInput!]
  connect: [CourseWhereUniqueInput!]
  set: [CourseWhereUniqueInput!]
  disconnect: [CourseWhereUniqueInput!]
  deleteMany: [CourseScalarWhereInput!]
  updateMany: [CourseUpdateManyWithWhereNestedInput!]
}

input CourseUpdateManyMutationInput {
  title: String
  subtitle: String
  images: String
  number: Int
  prevStation: String
  departureStation: String
  nextStation: String
  courseRoute: CourseUpdatecourseRouteInput
  departureTime: DateTime
  departureArea: String
}

input CourseUpdateManyWithWhereNestedInput {
  where: CourseScalarWhereInput!
  data: CourseUpdateManyDataInput!
}

input CourseUpdateWithWhereUniqueNestedInput {
  where: CourseWhereUniqueInput!
  data: CourseUpdateDataInput!
}

input CourseUpsertWithWhereUniqueNestedInput {
  where: CourseWhereUniqueInput!
  update: CourseUpdateDataInput!
  create: CourseCreateInput!
}

input CourseWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  subtitle: String
  subtitle_not: String
  subtitle_in: [String!]
  subtitle_not_in: [String!]
  subtitle_lt: String
  subtitle_lte: String
  subtitle_gt: String
  subtitle_gte: String
  subtitle_contains: String
  subtitle_not_contains: String
  subtitle_starts_with: String
  subtitle_not_starts_with: String
  subtitle_ends_with: String
  subtitle_not_ends_with: String
  images: String
  images_not: String
  images_in: [String!]
  images_not_in: [String!]
  images_lt: String
  images_lte: String
  images_gt: String
  images_gte: String
  images_contains: String
  images_not_contains: String
  images_starts_with: String
  images_not_starts_with: String
  images_ends_with: String
  images_not_ends_with: String
  number: Int
  number_not: Int
  number_in: [Int!]
  number_not_in: [Int!]
  number_lt: Int
  number_lte: Int
  number_gt: Int
  number_gte: Int
  prevStation: String
  prevStation_not: String
  prevStation_in: [String!]
  prevStation_not_in: [String!]
  prevStation_lt: String
  prevStation_lte: String
  prevStation_gt: String
  prevStation_gte: String
  prevStation_contains: String
  prevStation_not_contains: String
  prevStation_starts_with: String
  prevStation_not_starts_with: String
  prevStation_ends_with: String
  prevStation_not_ends_with: String
  departureStation: String
  departureStation_not: String
  departureStation_in: [String!]
  departureStation_not_in: [String!]
  departureStation_lt: String
  departureStation_lte: String
  departureStation_gt: String
  departureStation_gte: String
  departureStation_contains: String
  departureStation_not_contains: String
  departureStation_starts_with: String
  departureStation_not_starts_with: String
  departureStation_ends_with: String
  departureStation_not_ends_with: String
  nextStation: String
  nextStation_not: String
  nextStation_in: [String!]
  nextStation_not_in: [String!]
  nextStation_lt: String
  nextStation_lte: String
  nextStation_gt: String
  nextStation_gte: String
  nextStation_contains: String
  nextStation_not_contains: String
  nextStation_starts_with: String
  nextStation_not_starts_with: String
  nextStation_ends_with: String
  nextStation_not_ends_with: String
  departureTime: DateTime
  departureTime_not: DateTime
  departureTime_in: [DateTime!]
  departureTime_not_in: [DateTime!]
  departureTime_lt: DateTime
  departureTime_lte: DateTime
  departureTime_gt: DateTime
  departureTime_gte: DateTime
  departureArea: String
  departureArea_not: String
  departureArea_in: [String!]
  departureArea_not_in: [String!]
  departureArea_lt: String
  departureArea_lte: String
  departureArea_gt: String
  departureArea_gte: String
  departureArea_contains: String
  departureArea_not_contains: String
  departureArea_starts_with: String
  departureArea_not_starts_with: String
  departureArea_ends_with: String
  departureArea_not_ends_with: String
  AND: [CourseWhereInput!]
  OR: [CourseWhereInput!]
  NOT: [CourseWhereInput!]
}

input CourseWhereUniqueInput {
  id: ID
}

scalar DateTime

type Funding {
  id: ID!
  title: String!
  emoji: String
  author: User!
  content: String!
  createdAt: DateTime!
  deadline: DateTime!
  investors(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
}

type FundingConnection {
  pageInfo: PageInfo!
  edges: [FundingEdge]!
  aggregate: AggregateFunding!
}

input FundingCreateInput {
  id: ID
  title: String!
  emoji: String
  author: UserCreateOneWithoutMyFundingsInput!
  content: String!
  deadline: DateTime!
  investors: UserCreateManyWithoutFundingInvestInput
}

input FundingCreateManyWithoutAuthorInput {
  create: [FundingCreateWithoutAuthorInput!]
  connect: [FundingWhereUniqueInput!]
}

input FundingCreateManyWithoutInvestorsInput {
  create: [FundingCreateWithoutInvestorsInput!]
  connect: [FundingWhereUniqueInput!]
}

input FundingCreateWithoutAuthorInput {
  id: ID
  title: String!
  emoji: String
  content: String!
  deadline: DateTime!
  investors: UserCreateManyWithoutFundingInvestInput
}

input FundingCreateWithoutInvestorsInput {
  id: ID
  title: String!
  emoji: String
  author: UserCreateOneWithoutMyFundingsInput!
  content: String!
  deadline: DateTime!
}

type FundingEdge {
  node: Funding!
  cursor: String!
}

enum FundingOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  emoji_ASC
  emoji_DESC
  content_ASC
  content_DESC
  createdAt_ASC
  createdAt_DESC
  deadline_ASC
  deadline_DESC
}

type FundingPreviousValues {
  id: ID!
  title: String!
  emoji: String
  content: String!
  createdAt: DateTime!
  deadline: DateTime!
}

input FundingScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  emoji: String
  emoji_not: String
  emoji_in: [String!]
  emoji_not_in: [String!]
  emoji_lt: String
  emoji_lte: String
  emoji_gt: String
  emoji_gte: String
  emoji_contains: String
  emoji_not_contains: String
  emoji_starts_with: String
  emoji_not_starts_with: String
  emoji_ends_with: String
  emoji_not_ends_with: String
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  deadline: DateTime
  deadline_not: DateTime
  deadline_in: [DateTime!]
  deadline_not_in: [DateTime!]
  deadline_lt: DateTime
  deadline_lte: DateTime
  deadline_gt: DateTime
  deadline_gte: DateTime
  AND: [FundingScalarWhereInput!]
  OR: [FundingScalarWhereInput!]
  NOT: [FundingScalarWhereInput!]
}

type FundingSubscriptionPayload {
  mutation: MutationType!
  node: Funding
  updatedFields: [String!]
  previousValues: FundingPreviousValues
}

input FundingSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: FundingWhereInput
  AND: [FundingSubscriptionWhereInput!]
  OR: [FundingSubscriptionWhereInput!]
  NOT: [FundingSubscriptionWhereInput!]
}

input FundingUpdateInput {
  title: String
  emoji: String
  author: UserUpdateOneRequiredWithoutMyFundingsInput
  content: String
  deadline: DateTime
  investors: UserUpdateManyWithoutFundingInvestInput
}

input FundingUpdateManyDataInput {
  title: String
  emoji: String
  content: String
  deadline: DateTime
}

input FundingUpdateManyMutationInput {
  title: String
  emoji: String
  content: String
  deadline: DateTime
}

input FundingUpdateManyWithoutAuthorInput {
  create: [FundingCreateWithoutAuthorInput!]
  delete: [FundingWhereUniqueInput!]
  connect: [FundingWhereUniqueInput!]
  set: [FundingWhereUniqueInput!]
  disconnect: [FundingWhereUniqueInput!]
  update: [FundingUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [FundingUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [FundingScalarWhereInput!]
  updateMany: [FundingUpdateManyWithWhereNestedInput!]
}

input FundingUpdateManyWithoutInvestorsInput {
  create: [FundingCreateWithoutInvestorsInput!]
  delete: [FundingWhereUniqueInput!]
  connect: [FundingWhereUniqueInput!]
  set: [FundingWhereUniqueInput!]
  disconnect: [FundingWhereUniqueInput!]
  update: [FundingUpdateWithWhereUniqueWithoutInvestorsInput!]
  upsert: [FundingUpsertWithWhereUniqueWithoutInvestorsInput!]
  deleteMany: [FundingScalarWhereInput!]
  updateMany: [FundingUpdateManyWithWhereNestedInput!]
}

input FundingUpdateManyWithWhereNestedInput {
  where: FundingScalarWhereInput!
  data: FundingUpdateManyDataInput!
}

input FundingUpdateWithoutAuthorDataInput {
  title: String
  emoji: String
  content: String
  deadline: DateTime
  investors: UserUpdateManyWithoutFundingInvestInput
}

input FundingUpdateWithoutInvestorsDataInput {
  title: String
  emoji: String
  author: UserUpdateOneRequiredWithoutMyFundingsInput
  content: String
  deadline: DateTime
}

input FundingUpdateWithWhereUniqueWithoutAuthorInput {
  where: FundingWhereUniqueInput!
  data: FundingUpdateWithoutAuthorDataInput!
}

input FundingUpdateWithWhereUniqueWithoutInvestorsInput {
  where: FundingWhereUniqueInput!
  data: FundingUpdateWithoutInvestorsDataInput!
}

input FundingUpsertWithWhereUniqueWithoutAuthorInput {
  where: FundingWhereUniqueInput!
  update: FundingUpdateWithoutAuthorDataInput!
  create: FundingCreateWithoutAuthorInput!
}

input FundingUpsertWithWhereUniqueWithoutInvestorsInput {
  where: FundingWhereUniqueInput!
  update: FundingUpdateWithoutInvestorsDataInput!
  create: FundingCreateWithoutInvestorsInput!
}

input FundingWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  emoji: String
  emoji_not: String
  emoji_in: [String!]
  emoji_not_in: [String!]
  emoji_lt: String
  emoji_lte: String
  emoji_gt: String
  emoji_gte: String
  emoji_contains: String
  emoji_not_contains: String
  emoji_starts_with: String
  emoji_not_starts_with: String
  emoji_ends_with: String
  emoji_not_ends_with: String
  author: UserWhereInput
  content: String
  content_not: String
  content_in: [String!]
  content_not_in: [String!]
  content_lt: String
  content_lte: String
  content_gt: String
  content_gte: String
  content_contains: String
  content_not_contains: String
  content_starts_with: String
  content_not_starts_with: String
  content_ends_with: String
  content_not_ends_with: String
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  deadline: DateTime
  deadline_not: DateTime
  deadline_in: [DateTime!]
  deadline_not_in: [DateTime!]
  deadline_lt: DateTime
  deadline_lte: DateTime
  deadline_gt: DateTime
  deadline_gte: DateTime
  investors_every: UserWhereInput
  investors_some: UserWhereInput
  investors_none: UserWhereInput
  AND: [FundingWhereInput!]
  OR: [FundingWhereInput!]
  NOT: [FundingWhereInput!]
}

input FundingWhereUniqueInput {
  id: ID
}

type Image {
  id: ID!
  image: String!
  name: String!
}

type ImageConnection {
  pageInfo: PageInfo!
  edges: [ImageEdge]!
  aggregate: AggregateImage!
}

input ImageCreateInput {
  id: ID
  image: String!
  name: String!
}

type ImageEdge {
  node: Image!
  cursor: String!
}

enum ImageOrderByInput {
  id_ASC
  id_DESC
  image_ASC
  image_DESC
  name_ASC
  name_DESC
}

type ImagePreviousValues {
  id: ID!
  image: String!
  name: String!
}

type ImageSubscriptionPayload {
  mutation: MutationType!
  node: Image
  updatedFields: [String!]
  previousValues: ImagePreviousValues
}

input ImageSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ImageWhereInput
  AND: [ImageSubscriptionWhereInput!]
  OR: [ImageSubscriptionWhereInput!]
  NOT: [ImageSubscriptionWhereInput!]
}

input ImageUpdateInput {
  image: String
  name: String
}

input ImageUpdateManyMutationInput {
  image: String
  name: String
}

input ImageWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  AND: [ImageWhereInput!]
  OR: [ImageWhereInput!]
  NOT: [ImageWhereInput!]
}

input ImageWhereUniqueInput {
  id: ID
}

scalar Long

type Mutation {
  createBooking(data: BookingCreateInput!): Booking!
  updateBooking(data: BookingUpdateInput!, where: BookingWhereUniqueInput!): Booking
  upsertBooking(where: BookingWhereUniqueInput!, create: BookingCreateInput!, update: BookingUpdateInput!): Booking!
  deleteBooking(where: BookingWhereUniqueInput!): Booking
  deleteManyBookings(where: BookingWhereInput): BatchPayload!
  createCourse(data: CourseCreateInput!): Course!
  updateCourse(data: CourseUpdateInput!, where: CourseWhereUniqueInput!): Course
  updateManyCourses(data: CourseUpdateManyMutationInput!, where: CourseWhereInput): BatchPayload!
  upsertCourse(where: CourseWhereUniqueInput!, create: CourseCreateInput!, update: CourseUpdateInput!): Course!
  deleteCourse(where: CourseWhereUniqueInput!): Course
  deleteManyCourses(where: CourseWhereInput): BatchPayload!
  createFunding(data: FundingCreateInput!): Funding!
  updateFunding(data: FundingUpdateInput!, where: FundingWhereUniqueInput!): Funding
  updateManyFundings(data: FundingUpdateManyMutationInput!, where: FundingWhereInput): BatchPayload!
  upsertFunding(where: FundingWhereUniqueInput!, create: FundingCreateInput!, update: FundingUpdateInput!): Funding!
  deleteFunding(where: FundingWhereUniqueInput!): Funding
  deleteManyFundings(where: FundingWhereInput): BatchPayload!
  createImage(data: ImageCreateInput!): Image!
  updateImage(data: ImageUpdateInput!, where: ImageWhereUniqueInput!): Image
  updateManyImages(data: ImageUpdateManyMutationInput!, where: ImageWhereInput): BatchPayload!
  upsertImage(where: ImageWhereUniqueInput!, create: ImageCreateInput!, update: ImageUpdateInput!): Image!
  deleteImage(where: ImageWhereUniqueInput!): Image
  deleteManyImages(where: ImageWhereInput): BatchPayload!
  createReview(data: ReviewCreateInput!): Review!
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateManyReviews(data: ReviewUpdateManyMutationInput!, where: ReviewWhereInput): BatchPayload!
  upsertReview(where: ReviewWhereUniqueInput!, create: ReviewCreateInput!, update: ReviewUpdateInput!): Review!
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteManyReviews(where: ReviewWhereInput): BatchPayload!
  createUser(data: UserCreateInput!): User!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateManyUsers(data: UserUpdateManyMutationInput!, where: UserWhereInput): BatchPayload!
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  deleteUser(where: UserWhereUniqueInput!): User
  deleteManyUsers(where: UserWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

interface Node {
  id: ID!
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type Query {
  booking(where: BookingWhereUniqueInput!): Booking
  bookings(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking]!
  bookingsConnection(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookingConnection!
  course(where: CourseWhereUniqueInput!): Course
  courses(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Course]!
  coursesConnection(where: CourseWhereInput, orderBy: CourseOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CourseConnection!
  funding(where: FundingWhereUniqueInput!): Funding
  fundings(where: FundingWhereInput, orderBy: FundingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Funding]!
  fundingsConnection(where: FundingWhereInput, orderBy: FundingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FundingConnection!
  image(where: ImageWhereUniqueInput!): Image
  images(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Image]!
  imagesConnection(where: ImageWhereInput, orderBy: ImageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ImageConnection!
  review(where: ReviewWhereUniqueInput!): Review
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review]!
  reviewsConnection(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReviewConnection!
  user(where: UserWhereUniqueInput!): User
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  node(id: ID!): Node
}

type Review {
  id: ID!
  createdAt: DateTime!
  image: String
  author: User!
}

type ReviewConnection {
  pageInfo: PageInfo!
  edges: [ReviewEdge]!
  aggregate: AggregateReview!
}

input ReviewCreateInput {
  id: ID
  image: String
  author: UserCreateOneWithoutReviewsInput!
}

input ReviewCreateManyWithoutAuthorInput {
  create: [ReviewCreateWithoutAuthorInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateWithoutAuthorInput {
  id: ID
  image: String
}

type ReviewEdge {
  node: Review!
  cursor: String!
}

enum ReviewOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  image_ASC
  image_DESC
}

type ReviewPreviousValues {
  id: ID!
  createdAt: DateTime!
  image: String
}

input ReviewScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  AND: [ReviewScalarWhereInput!]
  OR: [ReviewScalarWhereInput!]
  NOT: [ReviewScalarWhereInput!]
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

input ReviewSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReviewWhereInput
  AND: [ReviewSubscriptionWhereInput!]
  OR: [ReviewSubscriptionWhereInput!]
  NOT: [ReviewSubscriptionWhereInput!]
}

input ReviewUpdateInput {
  image: String
  author: UserUpdateOneRequiredWithoutReviewsInput
}

input ReviewUpdateManyDataInput {
  image: String
}

input ReviewUpdateManyMutationInput {
  image: String
}

input ReviewUpdateManyWithoutAuthorInput {
  create: [ReviewCreateWithoutAuthorInput!]
  delete: [ReviewWhereUniqueInput!]
  connect: [ReviewWhereUniqueInput!]
  set: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutAuthorInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutAuthorInput!]
  deleteMany: [ReviewScalarWhereInput!]
  updateMany: [ReviewUpdateManyWithWhereNestedInput!]
}

input ReviewUpdateManyWithWhereNestedInput {
  where: ReviewScalarWhereInput!
  data: ReviewUpdateManyDataInput!
}

input ReviewUpdateWithoutAuthorDataInput {
  image: String
}

input ReviewUpdateWithWhereUniqueWithoutAuthorInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutAuthorDataInput!
}

input ReviewUpsertWithWhereUniqueWithoutAuthorInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutAuthorDataInput!
  create: ReviewCreateWithoutAuthorInput!
}

input ReviewWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  image: String
  image_not: String
  image_in: [String!]
  image_not_in: [String!]
  image_lt: String
  image_lte: String
  image_gt: String
  image_gte: String
  image_contains: String
  image_not_contains: String
  image_starts_with: String
  image_not_starts_with: String
  image_ends_with: String
  image_not_ends_with: String
  author: UserWhereInput
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  NOT: [ReviewWhereInput!]
}

input ReviewWhereUniqueInput {
  id: ID
}

type Subscription {
  booking(where: BookingSubscriptionWhereInput): BookingSubscriptionPayload
  course(where: CourseSubscriptionWhereInput): CourseSubscriptionPayload
  funding(where: FundingSubscriptionWhereInput): FundingSubscriptionPayload
  image(where: ImageSubscriptionWhereInput): ImageSubscriptionPayload
  review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
}

type User {
  id: ID!
  email: String!
  name: String!
  phone: String!
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  myFundings(where: FundingWhereInput, orderBy: FundingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Funding!]
  fundingInvest(where: FundingWhereInput, orderBy: FundingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Funding!]
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  id: ID
  email: String!
  name: String!
  phone: String!
  reviews: ReviewCreateManyWithoutAuthorInput
  myFundings: FundingCreateManyWithoutAuthorInput
  fundingInvest: FundingCreateManyWithoutInvestorsInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutFundingInvestInput {
  create: [UserCreateWithoutFundingInvestInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneWithoutMyFundingsInput {
  create: UserCreateWithoutMyFundingsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutFundingInvestInput {
  id: ID
  email: String!
  name: String!
  phone: String!
  reviews: ReviewCreateManyWithoutAuthorInput
  myFundings: FundingCreateManyWithoutAuthorInput
}

input UserCreateWithoutMyFundingsInput {
  id: ID
  email: String!
  name: String!
  phone: String!
  reviews: ReviewCreateManyWithoutAuthorInput
  fundingInvest: FundingCreateManyWithoutInvestorsInput
}

input UserCreateWithoutReviewsInput {
  id: ID
  email: String!
  name: String!
  phone: String!
  myFundings: FundingCreateManyWithoutAuthorInput
  fundingInvest: FundingCreateManyWithoutInvestorsInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  email_ASC
  email_DESC
  name_ASC
  name_DESC
  phone_ASC
  phone_DESC
}

type UserPreviousValues {
  id: ID!
  email: String!
  name: String!
  phone: String!
}

input UserScalarWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  AND: [UserScalarWhereInput!]
  OR: [UserScalarWhereInput!]
  NOT: [UserScalarWhereInput!]
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  NOT: [UserSubscriptionWhereInput!]
}

input UserUpdateDataInput {
  email: String
  name: String
  phone: String
  reviews: ReviewUpdateManyWithoutAuthorInput
  myFundings: FundingUpdateManyWithoutAuthorInput
  fundingInvest: FundingUpdateManyWithoutInvestorsInput
}

input UserUpdateInput {
  email: String
  name: String
  phone: String
  reviews: ReviewUpdateManyWithoutAuthorInput
  myFundings: FundingUpdateManyWithoutAuthorInput
  fundingInvest: FundingUpdateManyWithoutInvestorsInput
}

input UserUpdateManyDataInput {
  email: String
  name: String
  phone: String
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyMutationInput {
  email: String
  name: String
  phone: String
}

input UserUpdateManyWithoutFundingInvestInput {
  create: [UserCreateWithoutFundingInvestInput!]
  delete: [UserWhereUniqueInput!]
  connect: [UserWhereUniqueInput!]
  set: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutFundingInvestInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutFundingInvestInput!]
  deleteMany: [UserScalarWhereInput!]
  updateMany: [UserUpdateManyWithWhereNestedInput!]
}

input UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput!
  data: UserUpdateManyDataInput!
}

input UserUpdateOneRequiredWithoutMyFundingsInput {
  create: UserCreateWithoutMyFundingsInput
  update: UserUpdateWithoutMyFundingsDataInput
  upsert: UserUpsertWithoutMyFundingsInput
  connect: UserWhereUniqueInput
}

input UserUpdateOneRequiredWithoutReviewsInput {
  create: UserCreateWithoutReviewsInput
  update: UserUpdateWithoutReviewsDataInput
  upsert: UserUpsertWithoutReviewsInput
  connect: UserWhereUniqueInput
}

input UserUpdateWithoutFundingInvestDataInput {
  email: String
  name: String
  phone: String
  reviews: ReviewUpdateManyWithoutAuthorInput
  myFundings: FundingUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutMyFundingsDataInput {
  email: String
  name: String
  phone: String
  reviews: ReviewUpdateManyWithoutAuthorInput
  fundingInvest: FundingUpdateManyWithoutInvestorsInput
}

input UserUpdateWithoutReviewsDataInput {
  email: String
  name: String
  phone: String
  myFundings: FundingUpdateManyWithoutAuthorInput
  fundingInvest: FundingUpdateManyWithoutInvestorsInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpdateWithWhereUniqueWithoutFundingInvestInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutFundingInvestDataInput!
}

input UserUpsertWithoutMyFundingsInput {
  update: UserUpdateWithoutMyFundingsDataInput!
  create: UserCreateWithoutMyFundingsInput!
}

input UserUpsertWithoutReviewsInput {
  update: UserUpdateWithoutReviewsDataInput!
  create: UserCreateWithoutReviewsInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueWithoutFundingInvestInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutFundingInvestDataInput!
  create: UserCreateWithoutFundingInvestInput!
}

input UserWhereInput {
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
  myFundings_every: FundingWhereInput
  myFundings_some: FundingWhereInput
  myFundings_none: FundingWhereInput
  fundingInvest_every: FundingWhereInput
  fundingInvest_some: FundingWhereInput
  fundingInvest_none: FundingWhereInput
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
}

input UserWhereUniqueInput {
  id: ID
  email: String
  phone: String
}
`
      }
    